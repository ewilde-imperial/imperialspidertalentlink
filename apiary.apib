FORMAT: 1A
HOST: https://icl.spideronline.co.uk

# Spider Talentlink API Interface (v1.4.4)

This API document outlines the required requests and responses for seemlessly integrating the Spider / Talentlink API into the Imperial College London website.

When a page containing a recruitment element is called, PHP running on the production server will make a cURL request to the Spider API requesting the HTML content to be included in the output.

Once the page is rendered server-side and sent back to the browser, any user element interaction will cause the client-side code to request updates using JSON which will be rendered to the browser DOM.

All API requests are prefixed with _/v1/_ to determine API version number, in future any new or modified responses can be added and the corresponding version url depreciated.

All API requests must also include a provisioned API key in the request header, otherwise access is forbidden.

## Change log

https://github.com/ewilde-imperial/imperialspidertalentlink/commits/master

# Fetch [/v1/fetch/]
API requests for filling static content, dependent on values from within the Talentlink system.

## Filters [/v1/fetch/filters/{?filter,parent}]
For each filter group, a list of available options must be retrieved from the server.

+ Parameters

    + filter: `location` (enum[String], required) - the type of filter to get options for.
        + Members
            + `location`
            + `category`
            + `subcategory`
            + `job_type`
            + `faculty`
            + `department`
    + parent: `0` (number, optional) - filter the returned subcategories and departments based on their parent element (category and faculty respectivly). If a parent is specified for something other than subcategory or department then an error will be returned. If parent id is invalid, then no results will be returned.
   
### Retrieve Filters [GET]
Retrieve a list of values to be used in the search filter select boxes. Values listed here are for demonstration purposes, so can be changed depending on implentation.

#### Examples

##### List available categories
```
/v1/fetch/filters/?filter=category
```

##### List subcategories of 'Support services'
```
/v1/fetch/filters/?filter=subcategory&parent=16601
```

+ Request HTML Message

    + Headers

            Accept: text/html

+ Response 200 (text/html)

    + Body
    
        ```html
            <option value="0">Charing Cross</option>
            <option value="1">Chelsea and Westminster</option>
            <option value="2">Hammersmith</option>
            <option value="3">North West London Hospitals</option>
            <option value="4">Royal Brompton</option>
            <option value="5">Silwood Park</option>
            <option value="6">South Kensington</option>
            <option value="7">St Mary's</option>
            <option value="8">White City</option>
        ```

+ Response 400 (text/html)
**400 Error: bad request.** This is caused by the user requesting the resource with a parameter which cannot be handled, either becuase it doesnt exist or is of the incorrect type.

    + Body
    
        ```html
            <!-- error: bad request - no matching filter -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json
            
+ Response 200 (application/json)

    + Body
    
            {  
                "meta":{
                    "results":9,
                    "param":{
                        "filter_name":"location"
                    }
                },
                "data":[
                    {
                        "id":0,
                        "name":"Charing Cross"
                    },{
                        "id":1,
                        "name":"Chelsear and Westminster"
                    },{
                        "id":2,
                        "name":"Hammersmith"
                    },{
                        "id":3,
                        "name":"North West London Hospitals"
                    },{
                        "id":4,
                        "name":"Royal Brompton"
                    },{
                        "id":5,
                        "name":"Silwood Park"
                    },{
                        "id":6,
                        "name":"South Kensington"
                    },{
                        "id":7,
                        "name":"St Mary's"
                    },{
                        "id":8,
                        "name":"White City"
                    },{
                        "id":9,
                        "name":"Non-UK"
                    }
                ]
            }
            
+ Response 400 (application/json)
**400 Error: bad request.** This is caused by the user requesting the resource with a parameter which cannot be handled, either becuase it doesnt exist or is of the incorrect type.

    + Body
    
            {
                "meta":{
                    "param":{
                        "filter_name":"doesntexist"
                    }
                },
                "data":{
                    "response":"bad request",
                    "blame":["filter_name"],
                    "message":"no matching filter"
                }
            }

# Jobs [/v1/job/]

## Retrieve job listing [GET /v1/job/listing/{?keywords,location,category,subcategory,job_type,salary_min,salary_max,faculty,department,start,quantity,sort_by,sort_order,root_url,alert_id}]
This is the main API request for searching, filtering and sorting jobs. It will also be used for pagination of search results. Filter parameters are just example, to be replaced. To retrieve a listing of jobs, including those which are only available internally, add the authentication token parameter (X-User-Auth) to the request.

### Examples

#### Search for web development jobs in South Kensington or Silwood Park
```
/v1/job/listing/?keywords=web+development&location[]=6&location[]=5
```

#### Search for jobs which pay more than Â£50,000 outside of the uk, sorted by top paying
```
/v1/job/listing/?location[]=9&salary_min=50000&sort_by=salary&sort_order=desc
```

#### Retrieve a saved search result
```
/v1/job/listing/?alert_id=424442
```

+ Parameters

    + keywords: `lecturer` (string, optional) - the keywords to search job title, job summary, job description, Imperial job id fields. Multiple terms seperated by '+' e.g. `senior+lecturer` and should be treated as using AND logic.
    + location: `2` (array, optional) - the selected filter option value(s) for location.
    + category: `0` (array, optional) - the selected filter option value(s) for category.
    + subcategory: `5` (array, optional) - the selected filter options value(s) for subcategory, the category parameter is required if any value for this parameter is passed. To display all subcategories, this field should be empty.
    + job_type: `2` (array, optional) - the selected filter options value(s) for job type.
    + salary_min: `20000` (number, optional) - the selected filter options value(s) for the salary range minimum.
    + salary_max: `60000` (number, optional) - the selected filter options value(s) for the salary range maximum.
    + faculty: `2` (array, optional) - the faculty by which to filter search results.
    + department: `1` (array, optional) - the department by which to filter search results. A value for faculty is required for this parameter to be interpreted. If no value is passed, then matches for all departments are listed.
    + start: `0` (number, optional) - the numeric indicator of which record should be returned first. For example the first result would be `0`, tenth result would be `9`, first result in the third page would be `30` assuming 15 results per page.
        + Default: `0`
    + quantity: `30` (number, optional) - the number of results to return. _(maximum 50)_
        + Default: `15`
    + sort_by: `salary` (enum[string], optional) - the selected sort option value.
        + Default: `date-posted`
        + Members
            + `date-posted`
            + `closing-date`
            + `salary`
    + sort_order: `asc` (enum[string], optional) - the order by which to sort results
        + Default: `desc`
        + Members
            + `asc`
            + `desc`
    + root_url: `http://wwwtest.imperial.ac.uk/jobs` (string, optional) - the root url to use for links, to avoid hard-coding domain in response code.
        + Default: `https://www.imperial.ac.uk/jobs`
    + alert_id: `OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEr` (string, optional) - the saved search / job alert id, when this is included any other filtering parameters will be ignored

+ Request HTML Message

    + Headers
    
            Accept: text/html
            
+ Response 200 (text/html)

    + Body
    
        ```html
            <ul class="search-results" data-count="<!-- insert results count here -->">
                <!-- begin repeating result item -->
                <li class="imperial_single_result job<!-- if internal or redeployment visibility --> internal/redeployment<!-- end if -->" data-id="<!-- insert Imperial job id here -->">
                    <div class="row">
                        <h3 class="job-title"><!-- insert job title here --></h3>
                        <div class="job-description">
                            <div class="job-summary">
                                <p><!-- insert job summary here (450 characters max), adding ellipsis when truncated --></p>
                            </div>
                            <div class="job-more-information">
                                <a href="<!-- insert root_url parameter here -->/description/<!-- insert Imperial job id here -->/<!-- insert shortened, url friendly job title here -->" class="job-link">More information</a>
                            </div>
                        </div>
                        <div class="job-information">
                            <ul>
                                <li class="reference"><span class="label">Reference: </span><span class="value"><!-- insert job reference/id here --></span></li>
                                <li class="close-date"><span class="label">Closing date: </span><span class="value"><!-- insert job closing date here --></span></li>
                                <li class="department"><span class="label">Department: </span><span class="value"><!-- insert category here --></span></li>
                                <li class="location"><span class="label">Location: </span><span class="value"><!-- insert location here --></span></li>
                                <li class="type"><span class="label">Job type: </span><span class="value"><!-- insert job type here --></span></li>
                                <li class="salary"><span class="label">Salary: </span><span class="value"><!-- insert salary range here --></span></li>
                                <!-- if visibility is 'Redeplyoment' --><li class="visibility"><span class="label">Open to: </span><span class="value">Redeployment candidates only</span></li><!-- end if -->
                            </ul>
                        </div>
                        <div class="job-actions">
                            <a href="<!-- insert root_url parameter here -->/account/saved-jobs/?action=save&id=<!-- insert Imperial job id here -->" class="btn reverse">Save this job</a>
                            <a href="<!-- insert root_url parameter here -->/application/<!-- insert Imperial job id here -->/<!-- insert shortened, url friendly job title here -->/" class="btn">Apply now</a>
                        </div>
                    </div>
                </li>
                <!-- end repeating result item -->
            </ul>
        ```

+ Response 400 (text/html)
**400 Error: bad request.** This is caused by a request containing parameters which the server is not expecting.

    + Body
    
        ```html
            <ul class="search-results" data-count="0">
                <li class="imperial_single_result job error">
                    <div class="row">
                        <h3 class="job-title">Sorry, there was a problem with your search</h3>
                        <div class="job-description">
                            <div class="job-summary">
                                <p>The server is unable to handle one or more of the filters you have chosen.</p>
                                <p>Please choose your filters again using the options above.</p>
                            </div>
                        </div>
                    </div>
                </li>
            </ul>
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body
            
            {
                "meta":{
                    "results":2,
                    "param": {
                        "keywords":"lecturer",
                        "location":[2],
                        "category":[0],
                        "subcategory":[5],
                        "job_type":[2],
                        "salary_min":20000,
                        "salary_max":60000,
                        "faculty":[2],
                        "department":[1],
                        "start":0,
                        "quantity":2,
                        "sort_by":"salary",
                        "sort_order":"asc"
                    }
                },
                "data":[
                    {
                        "id":"/* insert Spider job id here */",
                        "title":"/* insert job title here */",
                        "summary":"/* insert job summary here */",
                        "url":"/* insert relative url here e.g. EX123456/job-title/ */",
                        "reference":"/* insert Imperial job reference here */",
                        "close_date":"/* insert job close date here */",
                        "department":"/* insert job department string here */",
                        "location":"/* insert job location here */",
                        "type":"/* insert job type here */",
                        "salary":"/* insert job salary range here */",
                        "category":"/* insert job category here */",
                        "subcategory":"/* insert job subcategory here */",
                        "visibility":"/* insert external, internal or redeployment here */"
                    },{
                        "id":"/* insert Spider job id here */",
                        "title":"/* insert job title here */",
                        "summary":"/* insert job summary here */",
                        "url":"/* insert relative url here */",
                        "reference":"/* insert Imperial job reference here */",
                        "close_date":"/* insert job close date here */",
                        "department":"/* insert job department string here */",
                        "location":"/* insert job location here */",
                        "type":"/* insert job type here */",
                        "salary":"/* insert job salary range here */",
                        "category":"/* insert job category here */",
                        "subcategory":"/* insert job subcategory here */",
                        "visibility":"/* insert external, internal or redeployment here */"
                    }
                ]
            }

+ Response 400 (application/json)
**400 Error: bad request.** This is caused by a request containing parameters which the server is not expecting.

    + Body
    
            {
                "meta":{
                    "param":{
                        "keywords":"lecturer",
                        "location":[2],
                        "category":[0],
                        "subcategory":[5],
                        "job_type":[2],
                        "salary_min":20000,
                        "salary_max":60000,
                        "faculty":[2],
                        "department":[1],
                        "start":0,
                        "quantity":2,
                        "sort_by":"salary",
                        "sort_order":"doesntexist"
                    }
                },
                "data":{
                    "response":"bad request",
                    "message":"sort_order does not match expected value"],
                    "blame":["sort_order"]
                }
            }
    
## Retrieve job details [GET /v1/job/details/{?id,root_url}]
This is used to fetch the full job descriptions and other detail for a particular job. If the job is for college internal users only, then the authentication token parameter (X-User-Auth) also needs to be included.

+ Parameters

    + id: `EX12345` (string, required) - the unique id for the job listing
    + root_url: `http://wwwtest.imperial.ac.uk/jobs` (string, optional) - the root url to use for links, to avoid hard-coding domain in response code
        + Default: `https://www.imperial.ac.uk/jobs`

+ Request HTML Message

    + Headers
    
            Accept: text/html
            
+ Response 200 (text/html)

    + Body
    
        ```html
            <div class="col lg-12 page-heading">
                <div class="breadcrumbs">
                    <ul>
                        <li><a href="/">Home</a></li>
                        <li><a href="<!-- insert root_url parameter here -->">Jobs</a></li>
                        <li><!-- insert job title here --></li>
                    </ul>
                </div>
                <h1><!-- insert job title here --></h1>
            </div>

            <div class="module job-description<!-- if internal or redeployment visibility --> internal/redeployment<!-- end if -->" itemscope itemtype="http://schema.org/JobPosting">
                <meta itemprop="title" content="<!-- insert job title here -->">

                <!-- begin call to action area -->
                <div class="highlight">
                    <a href="<!-- insert root_url parameter here -->/application/<!-- insert Imperial job id here -->/<!-- insert shortened, url friendly job title here -->/" class="btn">Apply now</a>
                    <a href="<!-- insert root_url parameter here -->/account/saved-jobs/?action=save&id=<!-- insert Imperial job id here -->" class="btn reverse">Save this job</a>
                </div>
                <!-- end call to action area -->

                <!-- begin job summary area -->
                <div class="summary">
                    <h2 class="sr-only">Job summary</h2>
                    <p>
                        <!-- insert job summary here -->
                    </p>
                </div>
                <!-- end job summary area -->

                <!-- begin vacancy listing information -->
                <div class="listing-info">
                    <h2 class="sr-only">Job listing information</h2>
                    <ul>
                        <li class="data reference"><span class="label">Reference</span> <span class="value"><!-- insert Imperial job reference here --></span></li>
                        <li class="data closing"><span class="label">Closing date</span> <span class="value" itemprop="validThrough"><!-- insert closing date here (php date format 'j F Y') --></span></li>
                    </ul>
                </div>
                <!-- end vacancy listing information -->

                <!-- begin job information banner -->
                <div class="row info job-info banner">
                    <h2 class="sr-only">Key information about the role</h2>
                    <ul class="column">
                        <li class="data location" itemprop="jobLocation" itemscope itemtype="http://schema.org/Place"><span class="label">Location</span> <span class="value" itemprop="address"><!-- insert location address here --></span> <a class="map" itemprop="hasMap" href="https://www.google.co.uk/maps/search/<!-- insert url encoded location address here -->/">(map)</a></li>
                    </ul>
                    <ul class="column">
                        <li class="data contract"><span class="label">Position type</span> <span class="value" itemprop="employmentType"><!-- insert job type here --></span></li>
                        <li class="data salary">
                            <span class="label">Salary</span> <span class="value" itemprop="baseSalary"><!-- insert salary range here --></span>
                            <span class="benefits">plus&nbsp;<a class="benefits" href="/job-applicants/staff-benefits/">benefits</a></span>
                            <meta itemprop="salaryCurrency" content="GBP">
                        </li>
                    </ul>
                    <ul class="row">
                        <li class="data department"><span class="label">Department</span> <span class="value"><!-- insert department here --></span></li>
                        <li class="data category"><span class="label">Category</span> <span class="value" itemprop="occupationalCategory"><!-- insert category here --> / <!-- insert subcategory here --></span></li>
                        <!-- if visibility is 'Redeployment' --><li class="data visibility"><span class="label">Open to</span><span class="value">Redeployment candidates only</span></li><!-- end if -->
                    </ul>
                </div>
                <!-- end job information banner -->


                <div class="wysiwyg job-content" itemprop="description">
                    <h2>Job description</h2>
                    <!-- insert full job description here -->
                    <h2>Documents</h2>
                    <ul>
                        <!-- repeat for all attachments -->
                        <li><a href="<!-- insert root_url parameter here -->/description/<!-- insert job id here -->/<!-- insert shortened job title here -->/<!-- insert url friendly attachement name here -->"><!-- insert attachment name here --></a></li>
                        <!-- end repeat -->
                    </ul>
                </div>
            </div>
        ```

+ Response 404 (text/html)
**404 Error: not found.** The requested job id does not exist or has been deleted.

    + Body
    
        ```html
            <div class="col lg-12 page-heading">
                <div class="breadcrumbs">
                    <ul>
                        <li><a href="/">Home</a></li>
                        <li><a href="<!-- insert root_url parameter here -->">Jobs</a></li>
                        <li>404 - Not found</li>
                    </ul>
                </div>
                <h1>Sorry, the job you are looking for is no longer available</h1>
            </div>

            <div class="module job-description">

                <div class="summary">
                    <p>Suggestions:</p>
                    <ul>
                        <li><a href="<!-- insert root_url parameter here -->">Return to homepage</a></li>
                        <li><a href="<!-- insert root_url parameter here -->/search">Search for another job</a></li>
                    </ul>
                </div>
            </div>
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "results":1,
                    "param":{
                        "id":"EX12345",
                        "root_url":"http://wwwtest.imperial.ac.uk/jobs"
                    }
                },
                "data":{
                    "id":"<!-- insert Spider id here -->",
                    "title":"/* insert job title here */",
                    "summary":"/* insert job summary here */",
                    "url":"/* insert relative url here */",
                    "reference":"/* insert Imperial job id here */",
                    "close_date":"/* insert job close date here */",
                    "faculty":"/* insert job faculty here */",
                    "department":"/* insert job department here */",
                    "location":"/* insert job location here */",
                    "type":"/* insert job type here */",
                    "salary":"/* insert job salary range here */",
                    "category":"/* insert job category here */",
                    "subcategory":"/* insert job subcategory here */",
                    "description":"/* insert full job description here */",
                    "attachments":[{
                        "name":"document1.doc",
                        "type":" application/msword"
                        "size":1048576
                        "url":"/EX12345/example-job-title/document1.doc"
                    },{
                        "name":"document2.doc",
                        "type":" application/msword"
                        "size":2097152
                        "url":"/EX12345/example-job-title/document2.doc"
                    }],
                    "status":"active", // other statuses ['expired', 'closed', 'talantlink offline']
                    "visibility":"/* insert external, internal or redeployment here */"
                }
            }

+ Response 404 (application/json)
**404 Error: not found.** The requested job id does not exist or has been deleted.

    + Body
    
            {
                "meta":{
                    "param":{
                        "id":"EX123450"
                    }
                },
                "data":{
                    "response":"not found"
                }
            }

## Retrieve job attachment [GET /v1/job/attachment/{?id,file}]
This is used to fetch a file which is associated with a particular job, used for job description documents etc.

+ Parameters

    + id: `EX12345` (string, required) - the unique id for the job listing
    + file: `Teaching+or+Senior+Teaching+Fellow+-+JD.doc` (string, required) - the unique name for the file associated with the job

+ Request

    + Headers
    
            Accept: */*, text/html
            
+ Response 200

    + Headers
    
            Content-Type: <!-- file mime type -->
            Content-Disposition: attachment; filename="<!-- file name -->"
            Content-Length: <!-- file size -->
            Content-Transfer-Encoding: binary
    
    + Body
    
        ```
            Binary file data
        ```

+ Response 404 (text/html)
**404 Error: not found.** The requested job id or associated file does not exist or has been removed

    + Body
    
        ```html
            <!-- error: not found -->
        ```
        
# Login [/v1/account/login/]
Retrieve the details required for the user to securely login to their account. On successful login, the server responds with a unique token in the header. This userid/token parameter should be passed for all authenticated requests.

## Retrieve authentication [POST /v1/account/login/{?email,password}]
Allow the user to authenticate against either SAML or talentlink, depending on the email address used. In the response header for this request, if authentication is successful, is a authentication token parameter (X-User-Auth) in the form '{key}={token}'. This parameter must be appended to any authenticated requests, and acts as authentication and a primary key to determine the account to use.

+ Parameters

    + email: `e.wilde@imperial.ac.uk` (string, required) - the email address of the user.
    + password: `password123` (string, required) - the password for the user

+ Request HTML Message

    + Headers

            Accept: text/html

+ Response 200 (text/html)
    
    + Headers
    
            X-User-Auth: {key}={token}

    + Body
    
        ```html
            <!-- success -->
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint with incorrect credentials

    + Body
    
        ```html
            <!-- error: unauthorised -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json
    
+ Response 200 (application/json)

    + Headers

            X-User-Auth: {key}={token}
    
    + Body
    
            {
                "meta":{
                    "param":{
                        "email":"e.wilde@imperial.ac.uk",
                        "password":true
                    }
                },
                "data":{
                    "response":"success",
                    "method":"Drupal"
                }
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without the required authorisation.

    + Body
    
            {
                "meta":{
                    "param":{
                        "email":"e.wilde@imperial.ac.uk",
                        "password":true
                    }
                },
                "data":{
                    "response":"unauthorised",
                    "method":"Drupal"
                }
            }

## Retrieve temporary authentication [POST /v1/account/token_login/{?token}]
Allow for temporary login using a server generated token, rather than login and password. This is used during the reset password process, and should only be handled server-side. The token can only be used once, after then it is invalidated.

+ Parameters

    + token: `3-1489504160-9k7b0lrBbMH5tfUK4cQHr4I3-WP1ThIptRQIaxMlUP0` (string, required) - a verification token to prove the user clicked a link generated by the server.

+ Request JSON Message

    + Headers

            Accept: application/json
    
+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "param":{
                        "token":true
                    }
                },
                "data":{
                    "response":"success",
                    "X-User-Auth":"<!-- insert session id here -->"
                }
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid token.

    + Body
    
            {
                "meta":{
                    "param":{
                        "token":true
                    }
                },
                "data":{
                    "response":"unauthorised",
                }
            }

+ Response 403 (application/json)
**403 Error: forbidden.** If a call is made to this endpoint for an account which is suspended, not activated or is an account authenticated via ldap.

    + Body
    
            {
                "meta":{
                    "param":{
                        "token":true
                    }
                },
                "data":{
                    "response":"forbidden",
                }
            }

+ Response 404 (application/json)
**404 Error: not found.** If a request is made to this endpoint with an missing or incorrect token

    + Body
    
            {
                "meta":{
                    "param":{
                        "token":false
                    }
                },
                "data":{
                    "response":"not found"
                }
            }



## Retrieve account activation [GET /v1/account/activate/{?token}]
When the user has created a new account, they are sent an email authentication link. This request handles the email address activation.

+ Parameters

    + token: `3-1489504160-9k7b0lrBbMH5tfUK4cQHr4I3-WP1ThIptRQIaxMlUP0` (string, required) - a verification token to prove the user clicked a link generated by the server.

+ Request HTML Message

    + Headers

            Accept: text/html

+ Response 200 (text/html)

    + Body
    
        ```html
            <!-- success -->
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint with an invalid token or email address.

    + Body
    
        ```html
            <!-- error: unauthorised -->
        ```

+ Response 409 (text/html)
**409 Error: conflict.** If a call is made to this endpoint when the account with this email address is already active.

    + Body
    
        ```html
            <!-- error: conflict -->
        ```
        
+ Response 501 (text/html)
**501 Error: not implemented.** If a call is made to this endpoint with an email address which is _used_ by talentlink, but not in Drupal.

    + Body
    
        ```html
            <!-- error: not implemented -->
        ```
        
+ Response 503 (text/html)
**503 Error: service unavailable.** If a call is made to this endpoint when the talentlink system is unavailable.

    + Body
    
        ```html
            <!-- error: service unavailable -->
        ```

# Account [/v1/account/]
This is the API for user-level account management.

## Create new account [POST /v1/account/create/{?email,password,confirmation,firstname,lastname,root_url}]
Create a new user account with the minimum required fields.

+ Parameters

    + email: `e.wilde@imperial.ac.uk` (string, required) - the email address of the user.
    + password: `password` (string, required) - the password to use for this account.
    + confirmation: `password` (string, required) - the confirmation of the password for this account.
    + firstname: `Ed` (string, required) - the user's forename.
    + lastname: `Wilde` (string, required) - the user's surname.
    + root_url: `http://wwwtest.imperial.ac.uk/jobs` (string, optional) - the root url to use for links, to avoid hard-coding domain in validation email.
        + Default: `https://www.imperial.ac.uk/jobs`

+ Request HTML Message

    + Headers

            Accept: text/html
            
+ Response 200 (text/html)

    + Body
    
        ```html
            <!-- success -->
        ```

+ Response 400 (text/html)
**400 Error: bad request.** A particular field or fields were rejected by the server-side validation rules.

    + Body
    
        ```html
            <!-- error: bad request -->
        ```

+ Response 409 (text/html)
**409 Error: conflict.** Conflict error returned when the user's email already exists in the system.

    + Body
    
        ```html
            <!-- error: conflict -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "param":{
                        "email":"e.wilde@imperial.ac.uk",
                        "password":"password",
                        "confirmation":"password",
                        "firstname":"Ed",
                        "lastname":"Wilde"
                    }
                },
                "data":{
                    "response":"success"
                }
            }

+ Response 400 (application/json)
**400 Error: bad request.** A particular field or fields were rejected by the server-side validation rules.

    + Body
    
            {
                "meta":{
                    "param":{
                        "email":"e.wildeimperial.ac.uk",
                        "password":"password",
                        "confirmation":"password",
                        "firstname":"Ed",
                        "lastname":""
                    }
                },
                "data":{
                    "response":"invalid",
                    "message":"fields failed validation",
                    "blame":[
                        "email",
                        "lastname"
                    ]
                }
            }

+ Response 409 (application/json)
**409 Error: conflict.** Conflict error returned when the user's email already exists in the system.

    + Body
    
            {
                "meta":{
                    "param":{
                        "email":"e.wilde@imperial.ac.uk",
                        "password":"password",
                        "confirmation":"password",
                        "firstname":"Ed",
                        "lastname":"Wilde"
                    }
                },
                "data":{
                    "response":"conflict",
                    "message":"account already exists"
                }
            }

## Import new account [POST /v1/account/import/{?email,prefix,firstname,lastname,uid,validation}]
Import a new account after verifying identity using a single sign on service. This call will create a new account (unless one is already created), bypassing activation and return a valid session allowing the user to access their account.

+ Parameters

    + email: `e.wilde@imperial.ac.uk` (string, required) - the email address of the user.
    + prefix: `Mr` (string, optional) - the users prefix/title.
    + firstname: `Ed` (string, required) - the user's forename.
    + lastname: `Wilde` (string, required) - the user's surname.
    + uid: `1234567` (integer, required) - the unique identifier for the user.
    + validation: `570a90bfbf8c7eab5dc5d4e26832d5b1` (string, required) - a validation string using a shared secret on the sender and api.

+ Request HTML Message

    + Headers

            Accept: text/html
            
+ Response 200 (text/html)

    + Headers

            X-User-Auth: {key}={token}

    + Body
    
        ```html
            <!-- success -->
        ```

+ Response 400 (text/html)
**400 Error: bad request.** A particular field or fields were rejected by the server-side validation rules.

    + Body
    
        ```html
            <!-- error: bad request -->
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint with an invalid validation field.

    + Body
    
        ```html
            <!-- error: unauthorised -->
        ```

+ Response 403 (text/html)
**403 Error: forbidden.** If a call is made to this endpoint for an account which is suspended.

    + Body
    
        ```html
            <!-- error: forbidden -->
        ```
        
+ Response 503 (text/html)
**503 Error: service unavailable.** If a call is made to this endpoint when the talentlink system is unavailable.
    
    + Body

        ```html
            <!-- error: service unavailable -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)
    
    + Headers
    
            X-User-Auth: {key}={token}

    + Body
    
            {
                "meta":{
                    "param":{
                        "email":"e.wilde@imperial.ac.uk",
                        "prefix":"Mr",
                        "firstname":"Ed",
                        "middlename":"Danger",
                        "lastname":"Wilde",
                        "uid":1234567,
                        "validation":"570a90bfbf8c7eab5dc5d4e26832d5b1"
                    }
                },
                "data":{
                    "response":"success"
                }
            }

+ Response 400 (application/json)
**400 Error: bad request.** A particular field or fields were rejected by the server-side validation rules.

    + Body
    
            {
                "meta":{
                    "param":{
                        "email":"e.wildeimperial.ac.uk",
                        "firstname":"Ed",
                        "lastname":"",
                        "validation":"570a90bfbf8c7eab5dc5d4e26832d5b1"
                    }
                },
                "data":{
                    "response":"invalid",
                    "message":"fields failed validation",
                    "blame":[
                        "email",
                        "lastname",
                        "uid"
                    ]
                }
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without the required authorisation.

    + Body
    
            {
                "meta":{
                    "param":{
                        "email":"e.wilde@imperial.ac.uk",
                        "prefix":"Mr",
                        "firstname":"Ed",
                        "middlename":"Danger",
                        "lastname":"Wilde",
                        "uid":1234567,
                        "validation":"111"
                    }
                },
                "data":{
                    "response":"unauthorised"
                }
            }

+ Response 403 (application/json)
**403 Error: forbidden.** If a call is made to this endpoint for an account which is suspended.

    + Body
    
            {
                "meta":{
                    "param":{
                        "email":"e.wilde@imperial.ac.uk",
                        "prefix":"Mr",
                        "firstname":"Ed",
                        "middlename":"Danger",
                        "lastname":"Wilde",
                        "uid":1234567,
                        "validation":"570a90bfbf8c7eab5dc5d4e26832d5b1"
                    }
                },
                "data":{
                    "response":"forbidden",
                    "message":"this account is suspended"
                }
            }

+ Response 503 (text/html)
**503 Error: service unavailable.** If a call is made to this endpoint when the talentlink system is unavailable.

    + Body
    
            {
                "meta":{
                    "param":{
                        "email":"e.wilde@imperial.ac.uk",
                        "prefix":"Mr",
                        "firstname":"Ed",
                        "middlename":"Danger",
                        "lastname":"Wilde",
                        "uid":1234567,
                        "validation":"570a90bfbf8c7eab5dc5d4e26832d5b1"
                    }
                },
                "data":{
                    "response":"service unavailable",
                    "message":"there are communication problems between the application and talentlink"
                }
            }

## Edit account [POST /v1/account/edit/{?email,prefix,firstname,middlename,lastname,phone,phone_alt,skype,address1,address2,address3,city,postcode,country,linkedin,xing}]
View or make amendments or additions to stored account information. Optional fields may be omitted from the request, to avoid modifying stored data unnecessarily. To make changes to the account, the authentication token parameter (X-User-Auth) must be included, this also acts as the primary key to tell the system which account to make changes to.

### Examples

#### Display the stored account values as an HTML form or JSON response
```
/v1/account/edit/
```

#### Change the preferred phone number for the account
```
/v1/account/edit/?phone=0987654321
```

#### Remove the linkedin address and change the last name on the account
```
/v1/account/edit/?linkedin=&lastname=Smith
```

+ Parameters

    + email: `e.wilde@imperial.ac.uk` (string, optional) - the email address of the user.
    + prefix: `Mr` (string, optional) - the users prefix/title
    + firstname: `Ed` (string, optional) - the users forename.
    + middlename: `Danger` (string, optional) - the users middlename
    + lastname: `Wilde` (string, optional) - the users surname.
    + phone: `01234567890` (string, optional) - the preferred phone number for the account
    + phone_alt: `01234567890` (string, optional) - the alternative phone number for the account
    + skype: `edwilde` (string, optional) - a skype username for the user
    + address1: `Imperial College London` (string, optional) - first line of the users address
    + address2: `South Kensington` (string, optional) - the second line of the address
    + address3: `Exhibition Road` (string, optional) - the third line of the address
    + city: `London` (string, optional) - the users city
    + postcode: `SW7 2AZ` (string, optional) - the users postcode
    + country: `United Kingdom` (string, optional) - the users country
    + linkedin: `https://uk.linkedin.com/in/edwilde`(string, optional) - the users linkedin profile address
    + xing: `https://www.xing.com/profile/edwilde` (string, optional) - the users xing profile address

+ Request HTML Message

    + Headers
    
            Accept: text/html
            
+ Response 200 (text/html)

    + Body
    
        ```html
            <fieldset>
                <legend>Name</legend>

                <!-- prefix -->
                <div class="field combo<!-- if manditory --> required<!-- end if manditory -->">
                    <label for="prefix"><!-- insert prefix label here --><!-- if manditory --> <span class="required">required</span><!-- end if manditory --></label>
                    <select name="prefix" id="prefix" class="chosen" autocomplete="honorific-prefix"<!-- if manditory --> required<!-- end if manditory -->>
                        <option value="" disabled>Please select</option>
                        <!-- repeat for all values -->
                        <option value="<!-- insert prefix value here -->"<!-- if this is the current prefix value --> selected<!-- end if -->><!-- insert prefix value here --></option>
                        <!-- end repeat  -->
                    </select>
                </div>
                <!-- end prefix -->

                <!-- first name -->
                <div class="field<!-- if manditory --> required<!-- end if manditory -->">
                    <label for="firstname"><!-- insert first name label here --><!-- if manditory --> <span class="required">required</span><!-- end if manditory --></label>
                    <input name="firstname" id="firstname" type="text" autocomplete="given-name" value="<!-- insert first name value here -->"<!-- if manditory --> required<!-- end if manditory -->>
                </div>
                <!-- end first name -->
                
                <!-- middle name -->
                <div class="field<!-- if manditory --> required<!-- end if manditory -->">
                    <label for="middlename"><!-- insert middle name label here --><!-- if manditory --> <span class="required">required</span><!-- end if manditory --></label>
                    <input name="middlename" id="middlename" type="text" autocomplete="additional-name" value="<!-- insert middle name value here -->"<!-- if manditory --> required<!-- end if manditory -->>
                </div>
                <!-- end middle name -->

                <!-- last name -->
                <div class="field<!-- if manditory --> required<!-- end if manditory -->">
                    <label for="lastname"><!-- insert last name label here --><!-- if manditory --> <span class="required">required</span><!-- end if manditory --></label>
                    <input name="lastname" id="lastname" type="text" autocomplete="family-name" value="<!-- insert last name value here -->"<!-- if manditory --> required<!-- end if manditory -->>
                </div>
                <!-- end last name -->
            </fieldset>

            <fieldset>
                <legend>Contact information</legend>
                <!-- email -->
                <div class="field<!-- if manditory --> required<!-- end if manditory -->">
                    <label for="email"><!-- insert email label here --><!-- if manditory --> <span class="required">required</span><!-- end if manditory --></label>
                    <!-- if user has Imperial login -->
                    <input name="email-placeholder" id="email-placeholder" type="email" value="<!-- insert email value here -->">
                    <input name="email" id="email" type="hidden" value="<!-- insert email value here -->">
                    <!-- else -->
                    <input name="email" id="email" type="email" autocomplete="email" value="<!-- insert email value here -->" placeholder="email@example.org"<!-- if manditory --> required<!-- end if manditory -->>
                    <!-- end if user -->
                </div>
                <!-- end email -->
                
                <!-- phone (preferred) -->
                <div class="field<!-- if manditory --> required<!-- end if manditory -->">
                    <label for="phone"><!-- insert phone label here --></label>
                    <input name="phone" id="phone" type="tel" autocomplete="tel" value="<!-- insert phone value here -->"<!-- if manditory --> required<!-- end if manditory -->>
                </div>
                <!-- end phone (preferred) -->
                
                <!-- phone (alternate) -->
                <div class="field<!-- if manditory --> required<!-- end if manditory -->">
                    <label for="phone_alt"><!-- insert mobile label here --></label>
                    <input name="phone_alt" id="phone_alt" type="tel" value="<!-- insert mobile value here -->"<!-- if manditory --> required<!-- end if manditory -->>
                </div>
                <!-- end phone (alternate) -->
                
                <!-- skype -->
                <div class="field icon skype<!-- if manditory --> required<!-- end if manditory -->">
                    <label for="skype"><!-- insert skype label here --></label>
                    <input name="skype" id="skype" type="text" placeholder="username" value="<!-- insert skype value here -->"<!-- if manditory --> required<!-- end if manditory -->>
                </div>
                <!-- end skype -->
            </fieldset>

            <fieldset>
                <legend>Location</legend>
                <div class="group address">
                    <!-- address line 1 -->
                    <div class="field<!-- if manditory --> required<!-- end if manditory -->">
                        <label for="address1">Address <span class="sr-only">line 1</span><!-- if manditory --> <span class="required">required</span><!-- end if manditory --></label>
                        <input name="address1" id="address1" type="text" autocomplete="address-line1" value="<!-- insert address line 1 value here-->"<!-- if manditory --> required<!-- end if manditory -->>
                    </div>
                    <!-- end address line 1 -->

                    <!-- address line 2 -->
                    <div class="field sr-only-label">
                        <label for="address2">Address line 2</label>
                        <input name="address2" id="address2" type="text" autocomplete="address-line2" value="<!-- insert address line 2 value here-->">
                    </div>
                    <!-- end address line 2 -->

                    <!-- address line 3 -->
                    <div class="field sr-only-label">
                        <label for="address3">Address line 3</label>
                        <input name="address3" id="address3" type="text" autocomplete="address-line3" value="<!-- insert address line 2 value here-->">
                    </div>
                    <!-- end address line 3 -->
                </div>
                <div class="group location">
                    <!-- city -->
                    <div class="field<!-- if manditory --> required<!-- end if manditory -->">
                        <label for="city"><!-- insert city label here --><!-- if manditory --> <span class="required">required</span><!-- end if manditory --></label>
                        <input name="city" id="city" type="text" value="<!-- insert city value here -->"<!-- if manditory --> required<!-- end if manditory -->>
                    </div>
                    <!-- end city -->

                    <!-- postcode -->
                    <div class="field<!-- if manditory --> required<!-- end if manditory -->">
                        <label for="postcode"><!-- insert postcode label here --><!-- if manditory --> <span class="required">required</span><!-- end if manditory --></label>
                        <input name="postcode" id="postcode" type="text" autocomplete="postal-code" value="<!-- insert postcode value here -->"<!-- if manditory --> required<!-- end if manditory -->>
                    </div>
                    <!-- end postcode -->
                </div>

                <!-- country -->
                <div class="field combo<!-- if manditory --> required<!-- end if manditory -->">
                    <label for="country"><!-- insert country label here --><!-- if manditory --> <span class="required">required</span><!-- end if manditory --></label>
                    <select name="country" id="country" class="chosen" autocomplete="country-name"<!-- if manditory --> required<!-- end if manditory -->>
                        <option value="" disabled>Please select</option>
                        <optgroup label="Frequently chosen">
                            <option value="GB">United Kingdom</option>
                            <option value="US">United States</option>
                        </optgroup>
                        <optgroup label="All options">
                            <!-- repeat all available options -->
                            <option value="<!-- insert country value here -->"><!-- insert country option label here --></option>
                            <!-- end repeat -->
                        </optgroup>
                    </select>
                </div>
                <!-- end country -->
            </fieldset>

            <fieldset>
                <legend>Profiles</legend>
                <!-- linkedin -->
                <div class="field icon linkedin<!-- if manditory --> required<!-- end if manditory -->">
                    <label for="linkedin"><!-- insert linkedin label here --><!-- if manditory --> <span class="required">required</span><!-- end if manditory --></label>
                    <input name="linkedin" id="linkedin" type="url" placeholder="Profile address" value="<!-- insert linkedin value here -->"<!-- if manditory --> required<!-- end if manditory -->>
                </div>
                <!-- end linkedin -->
                <!-- xing -->
                <div class="field icon xing<!-- if manditory --> required<!-- end if manditory -->">
                    <label for="xing"><!-- insert xing label here --><!-- if manditory --> <span class="required">required</span><!-- end if manditory --></label>
                    <input name="xing" id="xing" type="url" placeholder="Profile address"<!-- if manditory --> required<!-- end if manditory -->>
                </div>
                <!-- end xing -->
            </fieldset>
        ```

+ Response 400 (text/html)
**400 Error: bad request.** A particular field or fields were rejected by the server-side validation rules.

    + Body
    
        ```html
            <!-- error: bad request -->
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.
    
    + Body

        ```html
            <!-- error: unauthorised -->
        ```

+ Response 404 (text/html)
**404 Error: not found.** If a request is made to list details for a non-existant or deleted account.

    + Body
    
        ```html
            <!-- error: not found -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)
**List data** When no parameters are included in the request

    + Body
    
            {
                "meta":{},
                "data":{
                    "email":"e.wilde@imperial.ac.uk",
                    "prefix":"Mr",
                    "firstname":"Ed",
                    "middlename":"Danger",
                    "lastname":"Wilde",
                    "phone":"01234567890",
                    "phone_alt":"01234567890",
                    "skype":"edwilde",
                    "address1":"Imperial College London",
                    "address2":"South Kensington",
                    "address3":"Exhibition Road",
                    "city":"London",
                    "postcode":"SW7 2AZ",
                    "country":"United Kingdom",
                    "linkedin":"https://uk.linkedin.com/in/edwilde",
                    "xing":"https://www.xing.com/profile/edwilde"
                }
            }

+ Response 201 (application/json)
**Change data** When one or more parameter is included in the request

    + Body
    
            {
                "meta":{
                    "param":{
                        "email":"e.wilde@imperial.ac.uk",
                        "prefix":"Mr",
                        "firstname":"Ed",
                        "middlename":"Danger",
                        "lastname":"Wilde",
                        "phone":"01234567890",
                        "phone_alt":"01234567890",
                        "skype":"edwilde",
                        "address1":"Imperial College London",
                        "address2":"South Kensington",
                        "address3":"Exhibition Road",
                        "city":"London",
                        "postcode":"SW7 2AZ",
                        "country":"United Kingdom",
                        "linkedin":"https://uk.linkedin.com/in/edwilde",
                        "xing":"https://www.xing.com/profile/edwilde"
                    }
                },
                "data":{
                    "response":"success"
                }
            }

+ Response 400 (application/json)
**400 Error: bad request.** A particular field or fields were rejected by the server-side validation rules.

    + Body
    
            {
                "meta":{
                    "param":{
                        "email":"e.wildeimperial.ac.uk",
                        "firstname":"Ed",
                        "lastname":""
                    }
                },
                "data":{
                    "response":"invalid",
                    "message":"fields failed validation",
                    "field":[
                        "email",
                        "lastname"
                    ]
                }
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
            {
                "meta":{
                    "param":{
                        "email":"e.wilde@imperial.ac.uk"
                    }
                },
                "data":{
                    "response":"unauthorised"
                }
            }

+ Response 404 (application/json)
**404 Error: not found.** If a request is made to list details for a non-existant or deleted account.

    + Body
    
            {
                "meta":{
                    "param":{
                        "email":"f.wilde@imperial.ac.uk"
                    }
                },
                "data":{
                    "response":"not found",
                    "message":"this account doesn't exist or has been deleted"
                }
            }
            
## Delete account [DELETE /v1/account/remove/]
Remove the account and any linked data from talentlink. Any open applications should be deleted as part of the process. The authentication token parameter (X-User-Auth) must be included, this also acts as the primary key to tell the system which account to make changes to.

+ Request HTML Message
    
    + Headers
        
            Accept: text/html
            
+ Response 200 (text/html)
    
    + Body

        ```html
            <!-- success -->
        ```
        
+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.
    
    + Body

        ```html
            <!-- error: unauthorised -->
        ```
        
+ Response 404 (text/html)
**404 Error: not found.** If a request is made to remove a non-existant or already deleted account.
    
    + Body

        ```html
            <!-- error: not found -->
        ```

+ Response 503 (text/html)
**503 Error: service unavailable.** If a call is made to this endpoint when the talentlink system is unavailable.
    
    + Body

        ```html
            <!-- error: service unavailable -->
        ```
        
+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "param":{}
                },
                "data":{
                    "response":"success"
                }
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
            {
                "meta":{
                    "param":{}
                },
                "data":{
                    "response":"unauthorised"
                }
            }

+ Response 404 (application/json)
**404 Error: not found.** If a request is made to remove a non-existant or already deleted account.

    + Body
    
            {
                "meta":{
                    "param":{}
                },
                "data":{
                    "response":"not found"
                }
            }

+ Response 503 (text/html)
**503 Error: service unavailable.** If a call is made to this endpoint when the talentlink system is unavailable.

    + Body
    
            {
                "meta":{
                    "param":{}
                },
                "data":{
                    "response":"internal server error",
                    "message":"there are communication problems between the application and talentlink"
                }
            }

## Create new password request [POST /v1/account/reset_password/{?email}]
Allow the user to request a password reset url delivered to their email address. If this endpoint is called for an account which has not been activated, the activation token will be sent again to the email address.

+ Parameters

    + email: `e.wilde@imperial.ac.uk` (string, required) - the email address of the user to send a password reset request to.

+ Request HTML Message

    + Headers

            Accept: text/html
            
+ Response 200 (text/html)
    
    + Body

        ```html
            <!-- success -->
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token for an activated account.
    
    + Body

        ```html
            <!-- error: unauthorised -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "param":{
                        "email":"e.wilde@imperial.ac.uk"
                    }
                },
                "data":{
                    "response":"success"
                }
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token for an activated account.

    + Body
    
            {
                "meta":{
                    "param":{
                        "email":"e.wilde@imperial.ac.uk"
                    }
                },
                "data":{
                    "response":"unauthorised"
                }
            }

## Change password [POST /v1/account/change_password/{?password,confirmation}]
Allow a non-Imperial user to update their password in the system. The authentication token parameter (X-User-Auth) must be included, this also acts as the primary key to tell the system which account to make changes to.

+ Parameters

    + password: `password` (string, required) - the password to use for this account.
    + confirmation: `password` (string, required) - the confirmation of the password for this account.

+ Request HTML Message

    + Headers

            Accept: text/html
            
+ Response 200 (text/html)
    
    + Headers
    
            X-User-Auth: {key}={token}
    
    + Body

        ```html
            <!-- success -->
        ```

+ Response 400 (text/html)
**400 Error: bad request.** If a call is made to this endpoint without matching confirmation.
    
    + Body

        ```html
            <!-- error: bad request -->
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token for an activated account.
    
    + Body

        ```html
            <!-- error: unauthorised -->
        ```

+ Response 404 (text/html)
**404 Error: not found.** If a call is made to this endpoint for an account which uses LDAP authentication.
    
    + Body

        ```html
            <!-- error: not found -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Headers
    
            X-User-Auth: {key}={token}
            
    + Body
    
            {
                "meta":{
                    "param":{
                        "password": true,
                        "confirmation": true
                    }
                },
                "data":{
                    "response":"success"
                }
            }

+ Response 400 (application/json)
**400 Error: bad request.** If a call is made to this endpoint without matching confirmation.

    + Body
    
            {
                "meta":{
                    "param":{
                        "password": true,
                        "confirmation": true
                    }
                },
                "data":{
                    "response":"invalid",
                    "message":"fields failed validation"
                }
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token for an activated account.

    + Body
    
            {
                "meta":{
                    "param":{
                        "password": true,
                        "confirmation": true
                    }
                },
                "data":{
                    "response":"unauthorised"
                }
            }

+ Response 404 (application/json)
**404 Error: not found.** If a call is made to this endpoint for an account which uses LDAP authentication.

    + Body
    
            {
                "meta":{
                    "param":{
                        "password": true,
                        "confirmation": true
                    }
                },
                "data":{
                    "response":"not found",
                    "message":"this account is authenticated via LDAP"
                }
            }

# Application [/v1/application/]
This is the API for managing job applications. For all requests the authentication token parameter (X-User-Auth) is used as a primary key to determine the user requesting results.

## Retrieve a list of incomplete applications [GET /v1/application/listing-incomplete/{?root_url}]
Fetch a listing of incomplete job applications. Ordered by job status, closing date (asc)

+ Parameters

    + root_url: `http://wwwtest.imperial.ac.uk/jobs` (string, optional) - the root url to use for links, to avoid hard-coding domain and path.
        + Default: `https://www.imperial.ac.uk/jobs`

+ Request HTML Message

    + Headers

            Accept: text/html
            
+ Response 200 (text/html)

    + Body
    
        ```html
            <div class="incomplete">
                <h2>Incomplete</h2>
                <form method="post">
                    <ul class="listing incomplete-listing">
                        <!-- repeat for all incomplete applications -->
                        <li class="application listing-item">
                            <a href="<!-- insert root_url here -->/description/<!-- insert Imperial id here -->/<!-- insert shortened job title here -->">
                                <h3><!-- insert job title here --></h3>
                                <ul class="application-information">
                                    <li class="reference"><span class="label">Reference: </span><span class="value"><!-- insert Imperial id here --></span></li>
                                    <li class="date-modified"><span class="label">Last changed: </span><span class="value"><!-- insert date modified (php date format 'j F Y') here --></span></li>
                                    <li class="closing-date"><span class="label">Closing date: </span><span class="value"><!-- insert closing date (php date format 'j F Y') here --></span></li>
                                </ul>
                            </a>
                            <div class="controls">
                                <button class="btn reverse small remove" name="talentlink_id" value="<!-- insert talentlink id here -->">remove</button>
                                <a class="btn small" href="<!-- insert root_url parameter here -->/application/<!-- insert Imperial job id here -->/<!-- insert shortened, url friendly job title here -->/">continue</a>
                            </div>
                        </li>
                        <!-- end repeat -->
                    </ul>
                </form>
            </div>
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
        ```html
            <!-- error: unauthorised -->
        ```

+ Request JSON Message
    
    + Headers
        
            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "param":{},
                    "results":1
                },
                "data":[
                    {
                        "date_modified":"/* insert date job was last changed here */",
                        "id":"/* insert Spider job id here */",
                        "title":"/* insert job title here */",
                        "url":"/* insert relative url here */",
                        "reference":"/* insert Imperial job id here */",
                        "close_date":"/* insert job close date here */",
                        "talentlink_id":"/* insert id from talentlink here */",
                    }
                ]
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
            {
                "meta":{
                    "param":{}
                },
                "data":{
                    "response":"unauthorised"
                }
            }

## Retrieve a list of submitted applications [GET /v1/application/listing-submitted/{?root_url}]
Fetch a listing of submitted job applications. Ordered by last updated (desc).

+ Parameters

    + root_url: `http://wwwtest.imperial.ac.uk/jobs` (string, optional) - the root url to use for links, to avoid hard-coding domain and path.
        + Default: `https://www.imperial.ac.uk/jobs`

+ Request HTML Message

    + Headers

            Accept: text/html
            
+ Response 200 (text/html)

    + Body
    
        ```html
            <div class="submitted">
                <h2>Submitted</h2>
                <form method="post">
                    <ul class="listing submitted-listing<!-- if application is withdrawn --> withdrawn <!-- end if -->">
                        <!-- repeat for all submitted applications -->
                        <li class="application listing-item">
                            <a href="<!-- insert root_url here -->/description/<!-- insert Imperial id here -->/<!-- insert shortened job title here -->">
                                <h3><!-- insert job title here --></h3>
                                <ul class="application-information">
                                    <li class="reference"><span class="label">Reference: </span><span class="value"><!-- insert Imperial id here --></span></li>
                                    <li class="date-submitted"><span class="label">Submitted: </span><span class="value"><!-- insert date submitted (php date format 'j F Y') here --></span></li>
                                    <li class="status"><span class="label">Status: </span><span class="value"><!-- insert job status here --></span></li>
                                </ul>
                            </a>
                            <div class="controls">
                                <button class="btn reverse small remove" name="talentlink_id" value="<!-- insert talentlink id here -->"<!-- if application is withdrawn --> disabled <!-- end if -->>withdraw</button>
                                <!-- if application is not withdrawn --><a class="btn small" href="<!-- insert root_url parameter here -->/account/applications/?action=download&document_id=<!-- insert document id for 'document-pack' here -->">download</a><!-- end if -->
                            </div>
                        </li>
                        <!-- end repeat -->
                    </ul>
                </form>
            </div>
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
        ```html
            <!-- error: unauthorised -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "param":{},
                    "results":2
                },
                "data":[
                    {
                        "date_modified":"/* insert date application was submitted here */",
                        "id":"/* insert Spider job id here */",
                        "title":"/* insert job title here */",
                        "url":"/* insert relative url here */",
                        "reference":"/* insert Imperial job id here */",
                        "close_date":"/* insert job close date here */",
                        "talentlink_id":"/* insert id from talentlink here */",
                        "documents":[
                            {
                                "creation_date":"/* insert date (format: DATE_ATOM) */",
                                "description":"/* insert desciption or filename here */",
                                "document_type":"/* 'resume': for an uploaded CV, 'other': for any other uploaded files, 'document-pack': for the combined candidate pack including all documents parsed into PDF */",
                                "id":"/* insert document id here */",
                                "name":"/* insert filename here /*"
                            }
                            
                            ...
                        ]
                    },
                    {
                        "date_modified":"/* insert date application was submitted here */",
                        "id":"/* insert Spider job id here */",
                        "title":"/* insert job title here */",
                        "url":"/* insert relative url here */",
                        "reference":"/* insert Imperial job id here */",
                        "close_date":"/* insert job close date here */",
                        "talentlink_id":"/* insert id from talentlink here */",
                        "documents":[
                            {
                                "creation_date":"/* insert date (format DATE_ATOM) */",
                                "description":"/* insert desciption or filename here */",
                                "document_type":"/* 'resume': for an uploaded CV, 'other': for any other uploaded files, 'document-pack': for the combined candidate pack including all documents parsed into PDF */",
                                "id":"/* insert document id here */",
                                "name":"/* insert filename here /*"
                            }
                            
                            ...
                        ]
                    }
                ]
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
            {
                "meta":{
                    "param":{}
                },
                "data":{
                    "response":"unauthorised"
                }
            }

## Create a new application process [POST /v1/application/form/{?id,root_url}]
Start the process of creating a new application in talentlink. The rest of the application steps are handled by serializing the form returned from this request and POST back to the server. The application html output here is meant as an example, the actual output will be dependent on application form design from within the talentlink system.

+ Parameters

    + id: `EX12345` (string, required) - the Imperial id for the job listing
    + root_url: `http://wwwtest.imperial.ac.uk/jobs` (string, optional) - the root url to use for links, to avoid hard-coding domain and path.
        + Default: `https://www.imperial.ac.uk/jobs`

+ Request HTML Message

    + Headers

            Accept: text/html
            
+ Response 200 (text/html)

    + Headers

            ICL_APPLICATION_ID: (24-bit String)
    
    + Body
    
        ```html
            <div class="col lg-12 page-heading">
                <div class="breadcrumbs">
                    <ul>
                        <li><a href="/">Home</a></li>
                        <li><a href="<!-- insert root_url here -->">Jobs</a></li>
                        <li><a href="<!-- insert root_url here -->/application/<!-- insert Imperial id here -->/<!-- insert short job title here -->/"><!-- insert job title here --></a></li>
                        <li>Application step <!-- insert application form step number here --> - <!-- insert application form step title here --></li>
                    </ul>
                </div>
                <h1>Application for <!-- insert job title here --></h1>
            </div>
            
            <div class="module job-application form">
                <form method="post">
                    <fieldset>
                        <legend>Skills</legend>
                        <div class="field check">
                            <p class="block-label required">What is your area of expertise? <span class="required">required</span></p>
                            <ul class="col-lg2 col-md1">
                                <li>
                                    <input type="checkbox" name="q1" value="Administration / Support">
                                    <label for="q1-check1">Administration / Support</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q1" value="Audit">
                                    <label for="q1-check2">Audit</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q1" value="Controlling / Finance">
                                    <label for="q1-check3">Controlling / Finance</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q1" value="Customer Services">
                                    <label for="q1-check4">Customer Services</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q1" value="Engineering">
                                    <label for="q1-check5">Engineering</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q1" value="Facilities / Building Management">
                                    <label for="q1-check6">Facilities / Building Management</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q1" value="Finance">
                                    <label for="q1-check7">Finance</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q1" value="Human Resources">
                                    <label for="q1-check8">Human Resources</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q1" value="Information Technology">
                                    <label for="q1-check9">Information Technology</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q1" value="Legal">
                                    <label for="q1-check10">Legal</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q1" value="Management">
                                    <label for="q1-check11">Management</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q1" value="Marketing / Sales / Business Development">
                                    <label for="q1-check12">Marketing / Sales / Business Development</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q1" value="Merger & Acquisition">
                                    <label for="q1-check13">Merger &amp; Acquisition</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q1" value="Product Management">
                                    <label for="q1-check14">Product Management</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q1" value="Production">
                                    <label for="q1-check15">Production</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q1" value="Project Management">
                                    <label for="q1-check16">Project Management</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q1" value="Quality Management">
                                    <label for="q1-check17">Quality Management</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q1" value="Trade">
                                    <label for="q1-check18">Trade</label>
                                </li>
                            </ul>
                                <label class="extra" for="q1-other">Other</label>
                            <input type="text" name="q1-other" id="q1-other" placeholder="please specify">
                        </div>
                    </fieldset>
                        <fieldset>
                        <legend>Languages</legend>
                        <div class="field combo">
                            <label for="q2-combo">Language</label>
                            <select name="q2-combo" class="chosen">
                                <optgroup label="Frequently chosen">
                                    <option value="UK">English (UK)</option>
                                </optgroup>
                                <optgroup label="All options">
                                    <option value="BG">Bulgarian</option>
                                    <option value="CN">Chinese</option>
                                    <option value="HR">Croatian</option>
                                    <option value="CS">Czech</option>
                                    <option value="DN">Danish</option>
                                    <option value="NL">Dutch</option>
                                    <option value="UK">English (UK)</option>
                                    <option value="EN">English (US)</option>
                                    <option value="FN">Finnish</option>
                                    <option value="FR">French</option>
                                    <option value="DE">German</option>
                                    <option value="CH">German (SWZ)</option>
                                    <option value="EL">Greek</option>
                                    <option value="HU">Hungarian</option>
                                    <option value="IT">Italian</option>
                                    <option value="JA">Japanese</option>
                                    <option value="KO">Korean</option>
                                    <option value="NW">Norwegian</option>
                                    <option value="PL">Polish</option>
                                    <option value="PT">Portuguese</option>
                                    <option value="BR">Portuguese (BR)</option>
                                    <option value="RO">Romanian</option>
                                    <option value="RU">Russian</option>
                                    <option value="SR">Serbian</option>
                                    <option value="SK">Slovak</option>
                                    <option value="SL">Slovenian</option>
                                    <option value="SP">Spanish</option>
                                    <option value="SW">Swedish</option>
                                    <option value="TR">Turkish</option>
                                    <option value="CY">Welsh</option>
                                </optgroup>
                            </select>
                        </div>
                        <div class="field">
                            <label for="q2-text">Level</label>
                            <input type="text" name="q2-text">
                        </div>
                        <div class="inline-buttons">
                            <button class="btn small reverse no-icon">Remove language</button>
                            <button class="btn small">Add another language</button>
                        </div>
                    </fieldset>
                        <fieldset>
                        <legend>Employment history</legend>
                        <div class="field required">
                            <label for="q3-text1">Company <span class="required">required</span></label>
                            <input type="text" name="q3-text1" required>
                        </div>
                        <div class="field required">
                            <label for="q3-text2">Position <span class="required">required</span></label>
                            <input type="text" name="q3-text2" required>
                        </div>
                            <div class="group two column">
                            <div class="field date icon required">
                                <label for="q3-date1">Date from <span class="required">required</span></label>
                                <input type="date" name="q3-date1" required>
                            </div>
                            <div class="field date icon">
                                <label for="q3-date2">Date to</label>
                                <input type="date" name="q3-date2">
                            </div>
                        </div>
                            <div class="field textarea">
                            <label for="q3-textarea">Job description</label>
                            <textarea name="q3-textarea" cols="30" rows="10" maxlength="3000"></textarea>
                        </div>
                        <div class="inline-buttons">
                            <button class="btn small reverse no-icon">Remove position</button>
                            <button class="btn small">Add another position</button>
                        </div>
                    </fieldset>
                        <fieldset>
                        <legend>Work permit</legend>
                        <div class="field radio row required">
                            <p class="block-label">Do you have the eligibility to work in the EU? <span class="required">required</span></p>
                                <input type="radio" name="q4-radio" id="q4-radio1" value="Yes" required>
                            <label for="q4-radio1">Yes</label>
                            <input type="radio" name="q4-radio" id="q4-radio2" value="No" required>
                            <label for="q4-radio2">No</label>
                        </div>
                    </fieldset>
                        <fieldset>
                        <legend>Source</legend>
                        <div class="field check required">
                            <p class="block-label">How did you hear about this position? <span class="required">required</span></p>
                                <ul class="col-lg2 col-sm1">
                                <li>
                                    <input type="checkbox" name="q5-check" id="q5-check1" value="Via friend">
                                    <label for="q5-check1">Via friend</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q5-check" id="q5-check2" value="Clients website">
                                    <label for="q5-check2">Clients website</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q5-check" id="q5-check3" value="Via event">
                                    <label for="q5-check3">Via event</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q5-check" id="q5-check4" value="Via advert in paper">
                                    <label for="q5-check4">Via advert in paper</label>
                                </li>
                                <li>
                                    <input type="checkbox" name="q5-check" id="q5-check5" value="Via campaign">
                                    <label for="q5-check5">Via campaign</label>
                                </li>
                            </ul>
                                <label class="extra" for="q5-other">Other</label>
                            <input type="text" name="q5-other" id="q5-other" placeholder="please specify">
                        </div>
                    </fieldset>

                    <!-- begin action bar -->
                    <div class="actions row">
                        <button type="submit" class="btn">Save and continue</button>
                    </div>
                    <!-- end action bar -->
                </form>
            </div>
        ```
        
+ Response 201 (text/html)
**201 Created** The application has been sucessfully saved and will appear in the incomplete application listing.

    + Headers

            ICL_APPLICATION_ID: (24-bit String)
    
    + Body
    
        ```html
            <!-- done: saved -->
        ```

+ Response 202 (text/html)
**202 Accepted** The application has been sucessfully submitted and will appear in the submitted application listing.

    + Headers

            ICL_APPLICATION_ID: (24-bit String)
    
    + Body
    
        ```html
            <!-- done: completed -->
        ```

+ Response 205 (text/html)
**205 Reset Content** The application has been cancelled.

    + Headers

            ICL_APPLICATION_ID: (24-bit String)
    
    + Body
    
        ```html
            <!-- done: cancelled -->
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
        ```html
            <!-- error: unauthorised -->
        ```

+ Response 404 (text/html)
**404 Error: not found.** If a request is made for a job which does not exist.

    + Body
    
        ```html
            <!-- error: not found -->
        ```

## Retrieve application progress [GET /v1/application/progress/{?id,root_url}]
Fetch the sidebar navigation for the application process. This requires an application id (ICL_APPLICATION_ID) retrieved from the header of the /v1/application/form/ request, to identify which application form instance we require the navigation for. Note the difference between applicaton id requests (which use dash) and response (which use underscore)

+ Parameters

    + id: `EX12345` (string, required) - the Spider id for the job listing
    + root_url: `http://wwwtest.imperial.ac.uk/jobs` (string, optional) - the root url to use for links, to avoid hard-coding domain and path.
        + Default: `https://www.imperial.ac.uk/jobs`

+ Request HTML Message

    + Headers

            Accept: text/html
            ICL-APPLICATION-ID: (24-bit String)
            
+ Response 200 (text/html)

    + Headers

            ICL_APPLICATION_ID: (24-bit String)
    
    + Body
    
        ```html
            <div class="module">
                <ol class="primary" id="secondary-nav">
                    <!-- repeat for each step of application process -->
                    <li>
                        <button type="submit" form="main_form" name="step-<!-- insert application step number here -->" value="<!-- insert application step name here -->"<!-- if currently loaded --> class="active"<!-- end if --> formnovalidate>
                            <!-- insert application step name here -->
                        </button>
                    </li>
                    <!-- end repeat -->
                </ol>
            </div>
        ```
        
+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
        ```html
            <!-- error: unauthorised -->
        ```

+ Response 404 (text/html)
**404 Error: not found.** If a request is made for a job which does not exist.

    + Body
    
        ```html
            <!-- error: not found -->
        ```

## Extend an application session [GET /v1/application/extend/]
Keep-alive for the application process, to avoid talentlink timeout when completing the form.

+ Request HTML Message

    + Headers

            Accept: text/html
            ICL-APPLICATION-ID: (24-bit String)

+ Response 200 (text/html)

    + Body
    
        ```html
            <!-- success -->
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
        ```html
            <!-- error: unauthorised -->
        ```
        
+ Response 500 (text/html)
**500 Error: internal server error.** If there is an error returned from the talentlink server when renewing the session.

    + Body
    
        ```html
            <!-- error: died with unexpected response {error message} -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json
            ICL-APPLICATION-ID: (24-bit String)

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{},
                "data":{
                    "response":"success"
                }
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
            {
                "meta":{},
                "data":{
                    "response":"unauthorised"
                }
            }

+ Response 500 (application/json)
**500 Error: internal server error.** If there is an error returned from the talentlink server when renewing the session.

    + Body
    
            {
                "meta":{},
                "data":{
                    "response":"unexpected response /* insert error message */",
                    "body":"/* insert error message body from talentlink */"
                }
            }

## Delete an application [DELETE /v1/application/remove/{?talentlink_id}]
Remove an existing job application from the system.

+ Parameters

    + talentlink_id: `1153584324455-3` (string, required) - the talentlink id for the job listing

+ Request HTML Message

    + Headers

            Accept: text/html

+ Response 200 (text/html)

    + Body
    
        ```html
            <!-- success -->
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
        ```html
            <!-- error: unauthorised -->
        ```

+ Response 404 (text/html)
**404 Error: not found.** The job which is requested doesnt exist or has been deleted.

    + Body
    
        ```html
            <!-- error: not found -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "param":{
                        "talentlink_id":"1153584324455-3"
                    }
                },
                "data":{
                    "response":"success"
                }
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
            {
                "meta":{
                    "param":{
                        "talentlink_id":"1153584324455-3"
                    }
                },
                "data":{
                    "response":"unauthorised"
                }
            }

+ Response 404 (application/json)
**404 Error: not found.** The job which is requested doesnt exist or has been deleted.

    + Body
    
            {
                "meta":{
                    "param":{
                        "talentlink_id":"This id doesnt exist"
                    }
                },
                "data":{
                    "response":"not found",
                }
            }

# Saved Jobs [/v1/saved/]
The API for managing a users saved jobs. For all requests the authentication token parameter (X-User-Auth) is used as a primary key to determine the user requesting results.

## Retrieve list of saved open jobs [GET /v1/saved/listing-open/{?root_url}]

+ Parameters

    + root_url: `http://wwwtest.imperial.ac.uk/jobs` (string, optional) - the root url to use for links, to avoid hard-coding domain and path.
        + Default: `https://www.imperial.ac.uk/jobs`

+ Request HTML Message

    + Headers

            Accept: text/html
            
+ Response 200 (text/html)

    + Body
    
        ```html
            <div class="open">
                <h2>Open</h2>
                <form method="post">
                    <ul class="listing open-listing">
                        <!-- repeat for each saved job -->
                        <li class="saved listing-item">
                            <a href="<!-- insert root_url here -->/description/<!-- insert Imperial id here -->/<!-- insert shortened job title here -->/">
                                <h3><!-- insert job title here --></h3>
                                <ul class="saved-information">
                                    <li class="reference"><span class="label">Reference: </span><span class="value"><!-- insert imperial id here --></span></li>
                                    <li class="closing-date"><span class="label">Closing date: </span><span class="value"><!-- insert closing date (php date format 'j F Y') here --></span></li>
                                </ul>
                            </a>
                            <div class="controls">
                                <button class="btn reverse small remove" name="id" value="<!-- insert Imperial job id here -->">remove</button>
                                <a class="btn small" href="<!-- insert root_url parameter here -->/application/<!-- insert Imperial job id here -->/<!-- insert shortened, url friendly job title here -->/">apply</a>
                            </div>
                        </li>
                        <!-- end repeat -->
                    </ul>
                </form>
            </div>
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
        ```html
            <!-- error: unauthorised -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "param":{},
                    "results":2
                },
                "data":[
                    {
                        "date_modified":"/* insert date job was last changed here */",
                        "id":"/* insert Spider job id here */",
                        "title":"/* insert job title here */",
                        "summary":"/* insert job summary here */",
                        "url":"/* insert relative url here */",
                        "reference":"/* insert Imperial job reference here */",
                        "close_date":"/* insert job close date here */",
                        "talentlink_id":"/* insert id from talentlink here */"
                    },
                    {
                        "date_modified":"/* insert date job was last changed here */",
                        "id":"/* insert Spider job id here */",
                        "title":"/* insert job title here */",
                        "summary":"/* insert job summary here */",
                        "url":"/* insert relative url here */",
                        "reference":"/* insert Imperial job reference here */",
                        "close_date":"/* insert job close date here */",
                        "talentlink_id":"/* insert id from talentlink here */"
                    },
                ]
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
            {
                "meta":{
                    "param":{}
                },
                "data":{
                    "response":"unauthorised"
                }
            }
            
## Retrieve list of saved closed jobs [GET /v1/saved/listing-closed/]

+ Request HTML Message

    + Headers

            Accept: text/html
            
+ Response 200 (text/html)

    + Body
    
        ```html
            <div class="closed">
                <h2>Closed</h2>
                <form method="post">
                    <ul class="listing closed-listing">
                        <!-- repeat for all closed saved jobs -->
                        <li class="saved listing-item disabled">
                            <h3><!-- insert job title here --></h3>
                            <ul class="saved-information">
                                <li class="reference"><span class="label">Reference: </span><span class="value"><!-- insert Imperial job id here --></span></li>
                                <li class="closing-date"><span class="label">Closing date: </span><span class="value"><!-- insert closing date (php date format 'j F Y') here --></span></li>
                            </ul>
                            <div class="controls">
                                <button class="btn reverse small remove" name="id" value="<!-- insert Imperial job id here -->">remove</button>
                            </div>
                        </li>
                        <!-- end repeat -->
                    </ul>
                </form>
            </div>
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
        ```html
            <!-- error: unauthorised -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "param":{},
                    "results":2
                },
                "data":[
                    {
                        "date_modified":"/* insert date job was last changed here */",
                        "id":"/* insert Spider job id here */",
                        "title":"/* insert job title here */",
                        "summary":"/* insert job summary here */",
                        "url":"/* insert relative url here */",
                        "reference":"/* insert Imperial job reference here */",
                        "close_date":"/* insert job close date here */",
                        "talentlink_id":"/* insert id from talentlink here */"
                    },
                    {
                        "date_modified":"/* insert date job was last changed here */",
                        "id":"/* insert Spider job id here */",
                        "title":"/* insert job title here */",
                        "summary":"/* insert job summary here */",
                        "url":"/* insert relative url here */",
                        "reference":"/* insert Imperial job reference here */",
                        "close_date":"/* insert job close date here */",
                        "talentlink_id":"/* insert id from talentlink here */"
                    },
                ]
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
            {
                "meta":{
                    "param":{}
                },
                "data":{
                    "response":"unauthorised"
                }
            }

## Retrieve list of saved expired jobs [GET /v1/saved/listing-expired/]
Fetch a list of the saved jobs for a particular user. 

+ Request HTML Message

    + Headers

            Accept: text/html
            
+ Response 200 (text/html)

    + Body
    
        ```html
            <div class="expired">
                <h2>Expired</h2>
                <form method="post">
                    <ul class="listing expired-listing">
                        <!-- repeat for all closed saved jobs -->
                        <li class="saved listing-item disabled">
                            <h3><!-- insert job title here --></h3>
                            <ul class="saved-information">
                                <li class="reference"><span class="label">Reference: </span><span class="value"><!-- insert Imperial job id here --></span></li>
                                <li class="closing-date"><span class="label">Closing date: </span><span class="value"><!-- insert closing date (php date format 'j F Y') here --></span></li>
                            </ul>
                            <div class="controls">
                                <button class="btn reverse small remove" name="id" value="<!-- insert Imperial job id here -->">remove</button>
                            </div>
                        </li>
                        <!-- end repeat -->
                    </ul>
                </form>
            </div>
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "param":{},
                    "results":2
                },
                "data":[
                    {
                        "date_modified":"/* insert date job was last changed here */",
                        "id":"/* insert Spider job id here */",
                        "title":"/* insert job title here */",
                        "summary":"/* insert job summary here */",
                        "url":"/* insert relative url here */",
                        "reference":"/* insert Imperial job reference here */",
                        "close_date":"/* insert job close date here */",
                        "talentlink_id":"/* insert id from talentlink here */"
                    },
                    {
                        "date_modified":"/* insert date job was last changed here */",
                        "id":"/* insert Spider job id here */",
                        "title":"/* insert job title here */",
                        "summary":"/* insert job summary here */",
                        "url":"/* insert relative url here */",
                        "reference":"/* insert Imperial job reference here */",
                        "close_date":"/* insert job close date here */",
                        "talentlink_id":"/* insert id from talentlink here */"
                    },
                ]
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
            {
                "meta":{
                    "param":{}
                },
                "data":{
                    "response":"unauthorised"
                }
            }

## Save job [POST /v1/saved/save/?id={id}]
The user has clicked the save job button, add the job to the users saved jobs in their account.

+ Parameters

    + id: `EX12345` (string, required) - the unique id for the job listing

+ Request HTML Message

    + Headers

            Accept: text/html
            
+ Response 200 (text/html)

    + Body
    
        ```html
            <!-- success -->
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
        ```html
            <!-- error: unauthorised -->
        ```

+ Response 404 (text/html)
**404 Error: not found.** The job doesn't exist or has been deleted.

    + Body
    
        ```html
            <!-- error: not found -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "param":{
                        "id":"EX12345"
                    }
                },
                "data":{
                    "response":"success"
                }
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
            {
                "meta":{
                    "param":{
                        "id":"EX12345"
                    }
                },
                "data":{
                    "response":"unauthorised"
                }
            }

+ Response 404 (application/json)
**404 Error: not found.** The id for the job does not exist, or has been deleted.

    + Body
    
            {
                "meta":{
                    "param":{
                        "id":"This id doesnt exist"
                    }
                },
                "data":{
                    "response":"not found",
                }
            }

## Delete saved job [DELETE /v1/saved/remove/{?id}]
Remove a link to a saved job vacancy on the users account.

+ Parameters

    + id: `EX12345` (string, required) - the unique id for the job listing

+ Request HTML Message

    + Headers

            Accept: text/html
            
+ Response 200 (text/html)

    + Body
    
        ```html
            <!-- success -->
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
        ```html
            <!-- error: unauthorised -->
        ```
        
+ Response 404 (text/html)
**404 Error: not found.** A call is made to remove a job which doesnt exist or has been deleted.

    + Body
    
        ```html
            <!-- error: not found -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "param":{
                        "id":"EX12345"
                    }
                },
                "data":{
                    "response":"success"
                }
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
            {
                "meta":{
                    "param":{
                        "id":"EX12345"
                    }
                },
                "data":{
                    "response":"unauthorised"
                }
            }
            
+ Response 404 (application/json)
**404 Error: not found.** A call is made to remove a job which doesnt exist or has been deleted.

    + Body
    
            {
                "meta":{
                    "param":{
                        "id":"This id doesnt exist"
                    }
                },
                "data":{
                    "response":"not found",
                }
            }

# Job alerts / Saved searches [/v1/alerts/]
The API for managing a users job alerts / saved searches. For all requests the authentication token parameter (X-User-Auth) is used as a primary key to determine the user requesting results.

## Retrieve list of job alerts / saved searches [GET /v1/alerts/listing/{?root_url}]
Fetch a list of job alerts and/or saved searches. For the listing requests, the basic job information is also returned to reduce the number of calls to the API. Results should be ordered by frequency then alert_id (desc) so new alerts appear first.

+ Parameters

    + root_url: `http://wwwtest.imperial.ac.uk/jobs` (string, optional) - the root url to use for links, to avoid hard-coding domain and path.
        + Default: `https://www.imperial.ac.uk/jobs`

+ Request HTML Message

    + Headers

            Accept: text/html
            
+ Response 200 (text/html)

    + Body
    
        ```html
            <ul class="listing">
                <!-- repeat for all saved searches / job alerts -->
                <li class="saved-search listing-item">
                    <a href="<!-- insert root_url parameter here -->/account/alerts/edit/?alert_id=<!-- insert alert_id here -->alert_name=<!-- insert alert_name here -->&frequency=<!-- insert frequency here -->&<!-- insert serialised search filters here -->">
                        <h3><!-- insert job alert name here --></h3>
                        <ul class="saved-search-information">
                            <li class="last-modified"><span class="label">Last updated: </span><span class="value"><!-- insert date last updated here --></span></li>
                            <li class="frequency"><span class="label">Email frequency: </span><span class="value"><!-- insert frequency here --></span></li>
                        </ul>
                    </a>
                    <div class="controls">
                        <button class="btn reverse small remove" name="alert_id" value="<!-- insert alert_id here -->">remove</button>
                        <a href="<!-- insert root_url parameter here -->/search/?alert_id=<!-- insert alert_id here -->" class="btn small preview">preview</a>
                    </div>
                </li>
                <!-- end repeat -->
            </ul>
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
        ```html
            <!-- error: unauthorised -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "param":{},
                    "results":3
                },
                "data":[
                {
                        "alert_id":"123455",
                        "alert_name":"/* insert job alert name here */",
                        "frequency":"none",
                        "filter":{
                            "keywords":"lecturer",
                            "location":[2],
                            "category":[0],
                            "subcategory":[5],
                            "job_type":[2],
                            "salary_min":20000,
                            "salary_max":60000,
                            "department":[1]
                        }
                    },
                    {
                        "alert_id":"123456",
                        "alert_name":"/* insert job alert name here */",
                        "frequency":"daily",
                        "filter":{
                            "keywords":"senior+lecturer",
                            "location":[2, 7],
                            "salary_min":50000
                        }
                    },
                    {
                        "alert_id":"123457",
                        "alert_name":"/* insert job alert name here */",
                        "frequency":"monthly",
                        "filter":{
                            "category":[0, 1, 5],
                            "subcategory":[5],
                            "salary_min":20000
                        }
                    }
                ]
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
            {
                "meta":{
                    "param":{}
                },
                "data":{
                    "response":"unauthorised"
                }
            }

## Create new job alert / saved search [POST /v1/alerts/create/{?keywords,location,category,subcategory,job_type,salary_min,salary_max,name,frequency}]
Add a new job alert or saved search to the users account. It is assumed that the recipient email address will be the one stored by the system.

### Example

#### Create the example weekly job alert
```
/v1/alerts/create/?keywords=lecturer&location[]=2&location[]=5&salary_min=40000&salary_max=100000&name=lecturer+jobs+in+Hammersmith+or+Silwood+Park&frequency=weekly
```

+ Parameters

    + keywords: `lecturer` (string, optional) - the keywords to search job title, job summary, job description, Imperial job id fields.
    + location: `[2, 5]` (number/array, optional) - the selected filter option value(s) for location.
    + category: `` (number/array, optional) - the selected filter option value(s) for category.
    + subcategory: `` (number/array, optional) - the selected filter options value(s) for subcategory.
    + job_type: `` (number/array, optional) - the selected filter options value(s) for job type (contract).
    + salary_min: `40000` (number, optional) - the selected filter option value for minimum salary.
    + salary_max: `100000` (number, optional) - the selected filter option value for maximum salary.
    + name: `lecturer jobs in Hammersmith or Silwood Park` (string, required) - the name of the job alert.
    + frequency: `weekly` (string, optional) - how often to send the email alert. Default is to not send email, creating a saved search instead.
        + Default: `none`

+ Request HTML Message

    + Headers

            Accept: text/html
            
+ Response 200 (text/html)

    + Body
    
        ```html
            <!-- success -->
        ```

+ Response 400 (text/html)
**400 Error: bad request.** A particular field or fields were rejected by the server-side validation rules.

    + Body
    
        ```html
            <!-- error: bad request -->
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
        ```html
            <!-- error: unauthorised -->
        ```

+ Response 409 (text/html)
**409 Error: conflict.** Conflict error returned when the search alert already exists for this user.

    + Body
    
        ```html
            <!-- error: conflict -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "param":{
                        "keywords":"lecturer",
                        "name":"lecturer jobs in Hammersmith or Silwood Park",
                        "location":[2, 5],
                        "salary_min":40000,
                        "salary_max":100000,
                        "frequency":"weekly"
                    }
                },
                "data":{
                    "response":"success",
                    "alert_id":"1234568"
                }
            }

+ Response 400 (application/json)
**400 Error: bad request.** A particular field or fields were rejected by the server-side validation rules.

    + Body
    
            {
                "meta":{
                    "param":{
                        "keywords":"lecturer",
                        "name":"lecturer jobs in Hammersmith or Silwood Park",
                        "location":[2, 5, 100],
                        "salary_min":40000,
                        "salary_max":10000,
                        "frequency":"weekly"
                    }
                },
                "data":{
                    "response":"invalid",
                    "field":[
                        "salary"
                    ]
                }
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
            {
                "meta":{
                    "param":{
                        "keywords":"lecturer",
                        "name":"lecturer jobs in Hammersmith or Silwood Park",
                        "location":[2, 5],
                        "salary_min":40000,
                        "salary_max":100000,
                        "frequency":"weekly"
                    }
                },
                "data":{
                    "response":"unauthorised"
                }
            }

+ Response 409 (application/json)
**409 Error: conflict.** Conflict error returned when the search alert already exists for this user.

    + Body
    
            {
                "meta":{
                    "param":{
                        "keywords":"lecturer",
                        "name":"lecturer jobs in Hammersmith or Silwood Park",
                        "location":[2, 5],
                        "salary_min":40000,
                        "salary_max":100000,
                        "frequency":"weekly"
                    }
                },
                "data":{
                    "response":"conflict"
                }
            }

## Edit a job alert / saved search [POST /v1/alerts/edit/{?alert_id,keywords,location,category,subcategory,job_type,salary_min,salary_max,name,frequency}]
Make amendments to a job alert or saved search.

+ Parameters

    + alert_id: `123456` (number, required) - the id of the alert/saved search
    + keywords: `lecturer` (string, required) - the keywords to search job title, job summary, job description, Imperial job id fields.
    + location: `2` (number/array, required) - the selected filter option value(s) for location.
    + category: `` (number/array, required) - the selected filter option value(s) for category.
    + subcategory: `` (number/array, required) - the selected filter options value(s) for subcategory.
    + job_type: `` (number/array, required) - the selected filter options value(s) for job type.
    + salary_min: `20000` (number, required) - the selected filter option value for minimum salary.
    + salary_max: `60000` (number, required) - the selected filter option value for maximum salary.
    + name: `lecturer jobs in Hammersmith` (string, required) - the name of the job alert.
    + frequency: `daily` (string, required) - how often to send the email alert. Default is to not send email, creating a saved search instead.

+ Request HTML Message

    + Headers

            Accept: text/html
            
+ Response 200 (text/html)

    + Body
    
        ```html
            <!-- success -->
        ```

+ Response 400 (text/html)
**400 Error: bad request.** A particular field or fields were rejected by the server-side validation rules.

    + Body
    
        ```html
            <!-- error: bad request -->
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
        ```html
            <!-- error: unauthorised -->
        ```

+ Response 404 (text/html)
**404 Error: not found.** If the alert does not exist or has been deleted.

    + Body
    
        ```html
            <!-- error: not found -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "param":{
                        "alert_id":"123458",
                        "keywords":"lecturer",
                        "location":[2],
                        "category":[],
                        "subcategory":[],
                        "job_type":[],
                        "salary_min":40000,
                        "salary_max":100000,
                        "name":"lecturer jobs in Hammersmith",
                        "frequency":"weekly"
                    }
                },
                "data":{
                    "response":"success"
                }
            }

+ Response 400 (application/json)
**400 Error: bad request.** A particular field or fields were rejected by the server-side validation rules.

    + Body
    
            {
                "meta":{
                    "param":{
                        "alert_id":"123458",
                        "keywords":"lecturer",
                        "location":[2],
                        "category":[],
                        "subcategory":[],
                        "job_type":[],
                        "salary_min":40000,
                        "salary_max":20000,
                        "name":"lecturer jobs in Hammersmith",
                        "frequency":"weekly"
                    }
                },
                "data":{
                    "response":"invalid",
                    "field":[
                        "salary"
                    ]
                }
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
            {
                "meta":{
                    "param":{
                        "alert_id":"123458",
                        "keywords":"lecturer",
                        "location":[2],
                        "category":[],
                        "subcategory":[],
                        "job_type":[],
                        "salary_min":40000,
                        "salary_max":20000,
                        "name":"lecturer jobs in Hammersmith",
                        "frequency":"weekly"
                    }
                },
                "data":{
                    "response":"unauthorised"
                }
            }

+ Response 404 (application/json)
**404 Error: not found.** If the alert does not exist or has been deleted.

    + Body
    
            {
                "meta":{
                    "param":{
                        "alert_id":"123458",
                        "keywords":"lecturer",
                        "location":[2],
                        "category":[],
                        "subcategory":[],
                        "job_type":[],
                        "salary_min":40000,
                        "salary_max":20000,
                        "name":"lecturer jobs in Hammersmith",
                        "frequency":"weekly"
                    }
                },
                "data":{
                    "response":"not found"
                }
            }

## Delete job alert [DELETE /v1/alerts/remove/{?alert_id}]
Remove an existing job alert or saved search.

+ Parameters

    + alert_id: `123456` (number, optional) - the id of the alert/saved search
    
+ Request HTML Message

    + Headers

            Accept: text/html
            
+ Response 200 (text/html)

    + Body
    
        ```html
            <!-- error: success -->
        ```

+ Response 401 (text/html)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
        ```html
            <!-- error: unauthorised -->
        ```

+ Response 404 (text/html)
**404 Error: not found.** If the job alert or saved search does not exist or has been deleted.

    + Body
    
        ```html
            <!-- error: not found -->
        ```

+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "param":{
                        "alert_id":"123456"
                    }
                },
                "data":{
                    "response":"success"
                }
            }

+ Response 401 (application/json)
**401 Error: unauthorised.** If a call is made to this endpoint without a valid authentication token.

    + Body
    
            {
                "meta":{
                    "param":{
                        "alert_id":"123456"
                    }
                },
                "data":{
                    "response":"unauthorised"
                }
            }

+ Response 404 (application/json)
**404 Error: not found.** If the job alert or saved search does not exist or has been deleted.

    + Body
    
            {
                "meta":{
                    "param":{
                        "alert_id":"123456"
                    }
                },
                "data":{
                    "response":"not found"
                }
            }

## Stop a job alert [GET /v1/alerts/stop/{?alert_id}]
Stop/unsubscribe from an emailed job alert. This call doesn't require authentication.

+ Parameters

    + alert_id: `123456` (number, optional) - the id of the emailed alert
    
+ Request JSON Message

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    + Body
    
            {
                "meta":{
                    "param":{
                        "alert_id":"123456"
                    }
                },
                "data":{
                    "response":"success"
                }
            }

+ Response 404 (application/json)
**404 Error: not found.** If the job alert does not exist.

    + Body
    
            {
                "meta":{
                    "param":{
                        "alert_id":"123456"
                    }
                },
                "data":{
                    "response":"not found"
                }
            }